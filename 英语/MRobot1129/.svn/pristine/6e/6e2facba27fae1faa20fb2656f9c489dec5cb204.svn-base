//
//  ErrorTopicSetViewController.m
//  ERobot
//
//  Created by mac on 15/7/13.
//  Copyright (c) 2015年 BaiYu. All rights reserved.
//

#import "ErrorTopicSetViewController.h"
#import "QuestionDataModel.h"
#import "ReadingComModel.h"
#import "QuestionListModel.h"
#import "RequestCenter.h"
#import "PicBrowseViewController.h"
#import "ExerciseTrainViewController.h"
#import "RequestCenter.h"

@interface ErrorTopicSetViewController ()

@end

@implementation ErrorTopicSetViewController

- (void)base_navigation_LeftBarButtonPressed
{
    NSString *normal = nil;
    if ([_witchVC isEqualToString:@"我的错题库"]) {
        normal = @"确定退出错题库吗?";
    }else{
        normal = @"确定退出错题集吗?";
    }
    UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"友情提示" message:normal  delegate:self cancelButtonTitle:@"取消" otherButtonTitles:@"确定", nil];
    alert.tag = 102;
    [alert show];
    
    
}

#pragma mark ---UIAlertViewDelegate----

- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
    if (alertView.tag == 102) {
        if (buttonIndex) {
            [self.navigationController popViewControllerAnimated:YES];
            if (bsound) {
                [self.soundplayer stop];
                self.soundplayer=nil;
                bsound = NO;
            }
            
        }
    }
}

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    
    _qIdArray = [NSMutableArray array];
    
    _yuedanArr = [NSMutableArray array];
    _tingdanArr = [NSMutableArray array];
    // 1.4.14 根据月份查询错题列表
    [MBProgressHUD showHUDAddedTo:self.view animated:YES];
    LearningPlanRequest *request = [[LearningPlanRequest alloc]init];
    [request userMonthWrongQuestinListWithMonthTimeStamp:_monthTimeStamp success:^(id obj) {
        [MBProgressHUD hideHUDForView:self.view animated:YES];
        
        InfoResult *infoResult = (InfoResult *)obj;
        if ([infoResult.code isEqualToString:@"0"]) {
            QuestionDataModel *questionModel = [[QuestionDataModel alloc] init];
            questionModel = (QuestionDataModel *)[infoResult extraObj];
            _danArr = [NSArray arrayWithArray:questionModel.dxt];
            _tianArr = [NSArray arrayWithArray:questionModel.tkt];
            _yueArr = [NSArray arrayWithArray:questionModel.ydljt];
            _tingArr = [NSArray arrayWithArray:questionModel.tlt];
            
            //阅读理解
            for (int i = 0; i < _yueArr.count; i ++ ) {
                ReadingComModel *listmodel = _yueArr[i];
                NSDictionary *dict = listmodel.childQuestions;
                if ([dict objectForKey:@"DXT"]) {
                    QuestionDataModel *dataModel = [dict objectForKey:@"DXT"];
                    for (QuestionListModel *arr in dataModel.dxt) {
                        NSDictionary * dict = [NSDictionary dictionaryWithObjectsAndKeys:arr,@"title",@"0",@"type", nil];
                        [_yuedanArr addObject: dict];
                    }
                }
                if ([dict objectForKey:@"TKT"]) {
                    QuestionDataModel *dataModel = [dict objectForKey:@"TKT"];
                    for (QuestionListModel *arr in dataModel.tkt) {
                        NSDictionary * dict = [NSDictionary dictionaryWithObjectsAndKeys:arr,@"title",@"1",@"type", nil];
                        [_yuedanArr addObject: dict];
                    }
                }
                
            }
            
            //听力
            
            openedInDict = [NSMutableDictionary dictionary];
            for (int i = 0; i < _tingArr.count; i ++ ) {
                openedInArr = [NSMutableArray array];
                ReadingComModel *listmodel = _tingArr[i];
                NSDictionary *dict = listmodel.childQuestions;
                if ([dict objectForKey:@"DXT"]) {
                    QuestionDataModel *dataModel = [dict objectForKey:@"DXT"];
                    for (QuestionListModel *arr in dataModel.dxt) {
                        NSDictionary * dict = [NSDictionary dictionaryWithObjectsAndKeys:arr,@"title",@"0",@"type", nil];
                        [_tingdanArr addObject: dict];
                        [openedInArr addObject:@"0"];
                    }
                }
                if ([dict objectForKey:@"TKT"]) {
                    QuestionDataModel *dataModel = [dict objectForKey:@"TKT"];
                    for (QuestionListModel *arr in dataModel.tkt) {
                        NSDictionary * dict = [NSDictionary dictionaryWithObjectsAndKeys:arr,@"title",@"1",@"type", nil];
                        [_tingdanArr addObject: dict];
                        [openedInArr addObject:@"0"];
                    }
                }
                
                [openedInDict setValue:openedInArr forKey:[NSString stringWithFormat:@"%d",i]];
            }
            
            [self _prepareView];
            
            
            _questionAccount = (int)_tianArr.count + (int)_danArr.count + (int)_yuedanArr.count + (int)_tingdanArr.count;
            
            //答案对照
            _answerArr = [NSMutableArray array];
            for (int i = 0; i < _questionAccount; i ++) {
                [_answerArr addObject:@"0"];
            }
            
            
        }
        

    } failed:^(id obj) {
       [MBProgressHUD hideHUDForView:self.view animated:YES];
    }];

}

- (void)_prepareView
{

    UIView *bgView = [[UIView alloc]initWithFrame:CGRectMake(0, 64, MainScreenSize_W, 50)];
    bgView.backgroundColor = PView_BGColor;
    [self.view addSubview:bgView];
    
    _answerView = [[QuestionAnswer alloc]initWithFrame:CGRectMake(0, 64, MainScreenSize_W, MainScreenSize_H - 64)];
    _answerView.backgroundColor = [UIColor whiteColor];
    _answerView.delegate = self;
    _answerView.hidden = YES;
    [self.view addSubview:_answerView];
    
    _topicLabel = [[UILabel alloc]initWithFrame:CGRectMake(10, 24, 100, 30)];
    _topicLabel.textAlignment = NSTextAlignmentLeft;
    _topicLabel.font = [UIFont boldSystemFontOfSize:16];
    if (_danArr.count) {
        _topicLabel.text = @"选择题";
    }else if (_tianArr.count){
        _topicLabel.text = @"填空题";
    }else if (_yueArr.count){
        _topicLabel.text = @"阅读理解题";
    }else{
        _topicLabel.text = @"听力题";
    }
    [bgView addSubview:_topicLabel];
    
    CGRect rect = CGRectMake(0.0f, bgView.bottom + 10, MainScreenSize_W,MainScreenSize_H - 114.0f);
    _myScrollView = [[UIScrollView alloc]initWithFrame:rect];
    //题目的个数
    _myScrollView.contentSize= CGSizeMake(MainScreenSize_W*_questionAccount, 0);
    _myScrollView.pagingEnabled = YES;
    _myScrollView.delegate = self;
    _myScrollView.tag = 111;
    _myScrollView.showsHorizontalScrollIndicator = NO;
    _myScrollView.showsVerticalScrollIndicator = NO;
    _myScrollView.backgroundColor = [UIColor clearColor];
    [self.view addSubview:_myScrollView];
    
    
    [MBProgressHUD showHUDAddedTo:self.view animated:YES];
    self.view.backgroundColor = PView_BGColor;
    int j = 0,k = 0,m = 0;
    for (int i = 0; i < _questionAccount; i ++) {
        //判断选择题，填空题，听力题,阅读理解
        if ((i+1)> (_danArr.count + _tianArr.count + _yuedanArr.count)) {
            //听力题
            ErrorTingliQuestionView *questionView = [[ErrorTingliQuestionView alloc]initWithFrame:CGRectMake(10 + i*MainScreenSize_W, 0 , MainScreenSize_W - 20, MainScreenSize_H - 120)];
            int temp = 0;
            if ([_witchVC isEqualToString:@"我的错题库"]) {
                questionView.witchVC = @"我的错题库";
            }
            questionView.tag = i+1;
            for (int o = 0; o < _tingArr.count; o ++ ) {
                ReadingComModel *listmodel = _tingArr[o];
                NSDictionary *dict = listmodel.childQuestions;
                if ([dict objectForKey:@"DXT"]) {
                    QuestionDataModel *dataModel = [dict objectForKey:@"DXT"];
                    if (dataModel.dxt.count) {
                        temp += dataModel.dxt.count;
                    }
                }
                if ([dict objectForKey:@"TKT"]) {
                    QuestionDataModel *dataModel = [dict objectForKey:@"TKT"];
                    if (dataModel.tkt.count) {
                        temp += dataModel.tkt.count;
                    }
                }
                if (temp>m) {
                    [questionView addTingLiData:_tingArr[o] withPage:_tingdanArr[m] withIndex:o];
                    NSDictionary *dicts = _tingdanArr[m];
                    
                    QuestionListModel *listModel = [dicts valueForKey:@"title"];
                    [_qIdArray addObject:listModel.qId];
                    if ([listModel.qId isEqualToString:_qId]) {
                        _page = i;
                    }
                    
                    
                    break;
                }
            }
            questionView.delegate = self;
            questionView.backgroundColor = PView_BGColor;
            [_myScrollView addSubview:questionView];
            m ++;
        }else if ((i+1)> (_danArr.count + _tianArr.count)){
            //阅读理解题
            ErrorYueduQuestionView *questionView = [[ErrorYueduQuestionView alloc]initWithFrame:CGRectMake(10 + i*MainScreenSize_W, 0 , MainScreenSize_W - 20, MainScreenSize_H - 120)];
            int temp = 0;
            if ([_witchVC isEqualToString:@"我的错题库"]) {
                questionView.witchVC = @"我的错题库";
            }
            for (int n = 0; n < _yueArr.count; n ++ ) {
                ReadingComModel *listmodel = _yueArr[n];
                NSDictionary *dict = listmodel.childQuestions;
                if ([dict objectForKey:@"DXT"]) {
                    QuestionDataModel *dataModel = [dict objectForKey:@"DXT"];
                    if (dataModel.dxt.count) {
                        temp += dataModel.dxt.count;
                    }
                }
                if ([dict objectForKey:@"TKT"]) {
                    QuestionDataModel *dataModel = [dict objectForKey:@"TKT"];
                    if (dataModel.tkt.count) {
                        temp += dataModel.tkt.count;
                    }
                }
                if (temp>k) {
                    [questionView addYueDuData:_yueArr[n] withPage:_yuedanArr[k]];
                    NSDictionary *dicts = _yuedanArr[k];
                    
                    QuestionListModel *listModel = [dicts valueForKey:@"title"];
                    [_qIdArray addObject:listModel.qId];
                    if ([listModel.qId isEqualToString:_qId]) {
                        _page = i;
                    }
                    break;
                }
            }
            questionView.delegate = self;
            questionView.tag = 0;
            questionView.backgroundColor = PView_BGColor;
            [_myScrollView addSubview:questionView];
            k ++;
        }else if ((i+1)> _danArr.count){
            //填空题
            ErrorTianQuestionView *questionView = [[ErrorTianQuestionView alloc]initWithFrame:CGRectMake(10 + i*MainScreenSize_W, 0 , MainScreenSize_W - 20, MainScreenSize_H - 120)];
            if ([_witchVC isEqualToString:@"我的错题库"]) {
                questionView.witchVC = @"我的错题库";
            }
            [questionView addTianKongData:_tianArr[j]];
            QuestionListModel *listModel = _tianArr[j];
            [_qIdArray addObject:listModel.qId];
            if ([listModel.qId isEqualToString:_qId]) {
                _page = i;
            }
            questionView.delegate = self;
            questionView.tag = 0;
            questionView.backgroundColor = PView_BGColor;
            [_myScrollView addSubview:questionView];
            j ++;
            
        }else {
            //选择题
            ErrorQuestionView *questionView = [[ErrorQuestionView alloc]initWithFrame:CGRectMake(10 + i*MainScreenSize_W, 0 , MainScreenSize_W - 20, MainScreenSize_H - 120)];
            questionView.only = NO;
            questionView.delegate = self;
            questionView.tag = 0;
            if ([_witchVC isEqualToString:@"我的错题库"]) {
                questionView.witchVC = @"我的错题库";
            }
            [questionView addDanxuanData:_danArr[i]];
            QuestionListModel *listModel = _danArr[i];
            [_qIdArray addObject:listModel.qId];
            if ([listModel.qId isEqualToString:_qId]) {
                _page = i;
            }
            questionView.backgroundColor = PView_BGColor;
            [_myScrollView addSubview:questionView];
        }
        
    }
    _myScrollView.backgroundColor = PView_BGColor;
    
    if ([_witchVC isEqualToString:@"我的错题库"]) {

        [_myScrollView setContentOffset:CGPointMake(_page*MainScreenSize_W, 0) animated:NO];
        if ((_page+1)> (_danArr.count + _tianArr.count + _yuedanArr.count)) {
            _topicLabel.text = @"听力题";
        }else if ((_page+1)> (_danArr.count + _tianArr.count)){
            _topicLabel.text = @"阅读理解题";
        }else if ((_page+1)> _danArr.count){
            _topicLabel.text = @"填空题";
        }else {
            _topicLabel.text = @"选择题";
        }
    }
    if (_questionAccount) {
        [self performSelector:@selector(titles) withObject:self afterDelay:0.3];
    }
    [MBProgressHUD hideHUDForView:self.view animated:YES];
    
}

- (void)titles
{
    [self base_changeNavigationTitleWithString:[NSString stringWithFormat:@"%d/%d",_page+1,_questionAccount]  andImage:@"nav_title"];
    [self base_createRightNavigationBarButtonWithFrontImage:@"more2" andSelectedImageName:@"more2" andBackGroundImageName:@"more2" andTitle:@"交卷" andSize:CGSizeMake(40, 30)];
}

#pragma mark --UIScrollViewDelegate--

- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView
{
    if (scrollView.tag == 111) {
        [self.view endEditing:YES];
    }
    
    _page = (scrollView.contentOffset.x+MainScreenSize_W*0.5)/MainScreenSize_W;
    [self base_changeNavigationTitleWithString:[NSString stringWithFormat:@"%d/%d",_page+1,_questionAccount]  andImage:@"nav_title"];
    if ((_page+1)> (_danArr.count + _tianArr.count + _yuedanArr.count)) {
        _topicLabel.text = @"听力题";
        int oral =  (int)(_page - _danArr.count - _tianArr.count - _yueArr.count);
        int temp = 0;
        for (int n = 0; n < _tingArr.count; n ++ ) {
            ReadingComModel *listmodel = _tingArr[n];
            NSDictionary *dict = listmodel.childQuestions;
            if ([dict objectForKey:@"DXT"]) {
                QuestionDataModel *dataModel = [dict objectForKey:@"DXT"];
                if (dataModel.dxt.count) {
                    temp += dataModel.dxt.count;
                }
            }
            if ([dict objectForKey:@"TKT"]) {
                QuestionDataModel *dataModel = [dict objectForKey:@"TKT"];
                if (dataModel.tkt.count) {
                    temp += dataModel.tkt.count;
                }
            }
            if (temp>oral) {
                
                ErrorTingliQuestionView *questionView;
                for (UIView *view in [scrollView subviews]) {
                    if (view.tag){
                        questionView = (ErrorTingliQuestionView *)view;
                        
                        if (bsound) {
                            if ([_soundUrl isEqualToString:listmodel.qTitleMediaUrl]) {
                                
                                [questionView.tingLiButton startAnimating];//开始播放动画
                                
                            }else{
                                if ([self.soundplayer isPlaying]) {
                                    [self.soundplayer stop];
                                    [questionView.tingLiButton stopAnimating];
                                    bsound = NO;
                                }
                            }
                        }else{
                            [questionView.tingLiButton stopAnimating];
                        }
                    }
                }
                
                
                break;
            }
        }
        
    }else if ((_page+1)> (_danArr.count + _tianArr.count)){
        _topicLabel.text = @"阅读理解题";
        if ([self.soundplayer isPlaying]) {
            [self.soundplayer stop];
            bsound = NO;
        }
    }else if ((_page+1)> _danArr.count){
        _topicLabel.text = @"填空题";
        if ([self.soundplayer isPlaying]) {
            [self.soundplayer stop];
            bsound = NO;
        }
    }else {
        _topicLabel.text = @"选择题";
        if ([self.soundplayer isPlaying]) {
            [self.soundplayer stop];
            bsound = NO;
        }
    }
    _lastView = [scrollView superview];
}

#pragma mark ---TingliQuestionViewDelegate---

- (void)tingliQuestionViewDelegateWithButton:(UIView *)tap
{
    PLog(@"播放听力");
    
    ReadingComModel *listmodel = _tingArr[tap.tag];
    _soundIndex = (int)tap.tag;
    
    UIImageView *tingliView = (UIImageView *)tap;
    
    
    RequestCenter *requestCenter = [[RequestCenter alloc] init];
    if ((NSNull *)listmodel.qTitleMediaUrl != [NSNull null]) {
        [requestCenter downloadWithURL:[NSURL URLWithString:listmodel.qTitleMediaUrl] progress:^(float percent, NSString *path) {
            PLog(@"percent = %f",percent);
            PLog(@"path = %@",path);
            if (!bsound) {
                [tingliView startAnimating];
            }
            if (percent == 1) {
                if ([_soundUrl isEqualToString:listmodel.qTitleMediaUrl]) {
                    if ( bsound ) {
                        [self.soundplayer stop];
                        [tingliView stopAnimating];
                        bsound = NO;
                    }else{
                        [tingliView startAnimating];//开始播放动画
                        
                        //播放
                        NSURL *fileUrl=[NSURL fileURLWithPath:path];
                        
                        [self initPlayer];
                        NSError *error;
                        self.soundplayer=[[AVAudioPlayer alloc]initWithContentsOfURL:fileUrl error:&error];
                        if (error)
                        {
                            [aCommon iToast:@"请重新获取听力文件"];
                            [tingliView stopAnimating];
                            return;
                        }
                        [self.soundplayer setVolume:1];
                        [self.soundplayer prepareToPlay];
                        [self.soundplayer setDelegate:self];
                        [self.soundplayer play];
                        bsound = YES;
                    }
                }else{
                    if ( bsound ) {
                        [self.soundplayer stop];
                        [tingliView stopAnimating];
                        bsound = NO;
                    }
                    [tingliView startAnimating];//开始播放动画
                    
                    //播放
                    NSURL *fileUrl=[NSURL fileURLWithPath:path];
                    
                    [self initPlayer];
                    NSError *error;
                    self.soundplayer=[[AVAudioPlayer alloc]initWithContentsOfURL:fileUrl error:&error];
                    
                    if (error)
                    {
                        [aCommon iToast:@"请重新获取听力文件"];
                        [tingliView stopAnimating];
                        return;
                    }
                    [self.soundplayer setVolume:1];
                    [self.soundplayer prepareToPlay];
                    [self.soundplayer setDelegate:self];
                    [self.soundplayer play];
                    bsound = YES;
                }
                _soundUrl = listmodel.qTitleMediaUrl;
            }
            
            
        }];
    }else{
        [aCommon iToast:@"音频文件为空"];
    }
    
}

-(void)initPlayer{
    //初始化播放器的时候如下设置
    UInt32 sessionCategory = kAudioSessionCategory_MediaPlayback;
    AudioSessionSetProperty(kAudioSessionProperty_AudioCategory,
                            sizeof(sessionCategory),
                            &sessionCategory);
    
    UInt32 audioRouteOverride = kAudioSessionOverrideAudioRoute_Speaker;
    AudioSessionSetProperty (kAudioSessionProperty_OverrideAudioRoute,
                             sizeof (audioRouteOverride),
                             &audioRouteOverride);
    
    AVAudioSession *audioSession = [AVAudioSession sharedInstance];
    
    //默认情况下扬声器播放
    [audioSession setCategory:AVAudioSessionCategoryPlayback error:nil];
    [audioSession setActive:YES error:nil];
    audioSession = nil;
}

-(void)audioPlayerDidFinishPlaying:(AVAudioPlayer *)player successfully:(BOOL)flag
{
    //播放结束后自动结束播放动画
    if (bsound) {
        ErrorTingliQuestionView *questionView;
        for (UIView *view in [_myScrollView subviews]) {
            if (view.tag){
                questionView = (ErrorTingliQuestionView *)view;
                [questionView.tingLiButton stopAnimating];
            }
        }
        bsound = NO;
    }
    [self.soundplayer stop];
    self.soundplayer=nil;
}

#pragma mark ---TingliQuestionViewDelegate----

- (void)tingliQuestionViewDelegateWithBigImage:(UIView *)tapView
{
    PLog(@"点击放大图片===听力");
    UIImageView *imageView = (UIImageView *)tapView;
    PicBrowseViewController *vc = [[PicBrowseViewController alloc] init];
    vc.image = imageView.image;
    [self.navigationController pushViewController:vc animated:NO];
}

- (void)tingliQuestionViewDelegateWithUnderStandard:(NSString *)qId andButton:(UIButton *)btn
{
    PLog(@"听力已经掌握");
//    RequestHandler *request = [[RequestHandler alloc] init];
//    [request masterWrongWithqId:qId success:^(id obj) {
//        btn.hidden = YES;
//        
//        _page ++;
//        [_myScrollView setContentOffset:CGPointMake(_page*ScreenWidth, 0) animated:NO];
//        [self.middleBtn setTitle:[NSString stringWithFormat:@"%d/%d",_page+1,_questionAccount] forState:UIControlStateNormal];
//        
//    } failed:^(id obj) {
//        InfoResult *infoResult = (InfoResult *)obj;
//        [MBProgressHUD showSuccess:infoResult.desc toView:self.view];
//    }];
}

#pragma mark  ---YueduQuestionViewDelegate----

- (void)yueduQuestionViewDelegateWithBigImage:(UIView *)tapView
{
    PLog(@"点击方法图片==阅读");
    UIImageView *imageView = (UIImageView *)tapView;
    PicBrowseViewController *vc = [[PicBrowseViewController alloc] init];
    vc.image = imageView.image;
    [self.navigationController pushViewController:vc animated:NO];
}

- (void)yueduQuestionViewDelegateWithUnderStanderd:(NSString *)qId andButton:(UIButton *)btn
{
    PLog(@"阅读已经掌握");
//    RequestHandler *request = [[RequestHandler alloc] init];
//    [request masterWrongWithqId:qId success:^(id obj) {
//        
//         btn.hidden = YES;
//        
//        _page ++;
//        [_myScrollView setContentOffset:CGPointMake(_page*ScreenWidth, 0) animated:NO];
//        [self.middleBtn setTitle:[NSString stringWithFormat:@"%d/%d",_page+1,_questionAccount] forState:UIControlStateNormal];
//        
//    } failed:^(id obj) {
//        InfoResult *infoResult = (InfoResult *)obj;
//        [MBProgressHUD showSuccess:infoResult.desc toView:self.view];
//    }];
}

#pragma mark ---ErrorQuestionViewDelegate---

- (void)errorQuestionViewDelegateWithBigImage:(UIView *)tapView
{
    PLog(@"点击放大图片===单选");
    UIImageView *imageView = (UIImageView *)tapView;
    PicBrowseViewController *vc = [[PicBrowseViewController alloc] init];
    vc.image = imageView.image;
    [self.navigationController pushViewController:vc animated:NO];
}

- (void)errorQuestionViewDelegateWithUnderStand:(NSString *)qId andButton:(UIButton *)btn
{
    PLog(@"单选已经掌握");
//    RequestHandler *request = [[RequestHandler alloc] init];
//    [request masterWrongWithqId:qId success:^(id obj) {
//       
//         btn.hidden = YES;
//        
//        _page ++;
//        [_myScrollView setContentOffset:CGPointMake(_page*ScreenWidth, 0) animated:NO];
//        [self.middleBtn setTitle:[NSString stringWithFormat:@"%d/%d",_page+1,_questionAccount] forState:UIControlStateNormal];
//        
//    } failed:^(id obj) {
//        InfoResult *infoResult = (InfoResult *)obj;
//        [MBProgressHUD showSuccess:infoResult.desc toView:self.view];
//    }];
}

#pragma mark  ----TianQuestionViewDelegate----

- (void)tianQuestionViewDelegateWithBigImage:(UIView *)tapView
{
    PLog(@"点击放大图片===填空");
    UIImageView *imageView = (UIImageView *)tapView;
    PicBrowseViewController *vc = [[PicBrowseViewController alloc] init];
    vc.image = imageView.image;
    [self.navigationController pushViewController:vc animated:NO];
}

- (void)tianQuestionViewDelegateWithUnderStandard:(NSString *)qId andButton:(UIButton *)btn
{
    PLog(@"填空已经掌握");
//    RequestHandler *request = [[RequestHandler alloc] init];
//    [request masterWrongWithqId:qId success:^(id obj) {
//       
//         btn.hidden = YES;
//        
//        _page ++;
//        [_myScrollView setContentOffset:CGPointMake(_page*ScreenWidth, 0) animated:NO];
//        [self.middleBtn setTitle:[NSString stringWithFormat:@"%d/%d",_page+1,_questionAccount] forState:UIControlStateNormal];
//        
//    } failed:^(id obj) {
//        InfoResult *infoResult = (InfoResult *)obj;
//        [MBProgressHUD showSuccess:infoResult.desc toView:self.view];
//    }];
}

#pragma mark ----QuestionAnswerDelegate---

- (void)QuestionAnswerDelegateWithTag:(NSUInteger)tag
{
    _isRightBtn = !_isRightBtn;
    if (_isRightBtn) {
        _answerView.hidden = NO;
    }else{
        _answerView.hidden = YES;
    }
    _page = (int)tag;
    [_myScrollView setContentOffset:CGPointMake(tag*MainScreenSize_W, 0) animated:NO];
    [self base_changeNavigationTitleWithString:[NSString stringWithFormat:@"%ld/%d",tag+1,_questionAccount] andImage:@"nav_title"];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

@end
